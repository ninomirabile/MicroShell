# Environment Configuration Example
# Copy this file to .env and update with your actual values
# NEVER commit .env to version control!

# Database Configuration
# For development: use SQLite
# For production: use PostgreSQL
DATABASE_URL=sqlite:///./microshell.db
# DATABASE_URL=postgresql://username:password@localhost:5432/database_name

# JWT Configuration - CRITICAL: Generate secure keys for production!
# Use: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=CHANGE-THIS-IN-PRODUCTION-USE-SECURE-RANDOM-KEY
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# Server Configuration
HOST=0.0.0.0
PORT=8000
DEBUG=true

# Admin User Configuration - CHANGE THESE IN PRODUCTION!
ADMIN_EMAIL=admin@microshell.com
ADMIN_PASSWORD=CHANGE-THIS-SECURE-PASSWORD

# CORS Configuration (adjust for your frontend URLs)
ALLOWED_ORIGINS=http://localhost:4200,http://localhost:4201,http://localhost:4202,http://localhost:4203

# Optional: Redis Configuration
REDIS_URL=redis://localhost:6379/0

# Optional: Email Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
EMAIL_FROM=noreply@microshell.com

# Optional: File Upload Configuration
MAX_FILE_SIZE=10485760  # 10MB
UPLOAD_FOLDER=uploads/

# Optional: Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=logs/microshell.log

# Security Notes:
# 1. Generate a new SECRET_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
# 2. Use strong passwords (minimum 12 characters, mixed case, numbers, symbols)
# 3. Never use default passwords in production
# 4. Consider using environment-specific .env files (.env.production, .env.staging) 
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: microshell-postgres
    environment:
      POSTGRES_DB: microshell_db
      POSTGRES_USER: microshell
      POSTGRES_PASSWORD: microshell123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microshell-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U microshell -d microshell_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: microshell-backend
    environment:
      - DATABASE_URL=postgresql://microshell:microshell123@postgres:5432/microshell_db
      - DEBUG=true
      - SECRET_KEY=microshell-super-secret-key-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microshell-network
    command: >
      sh -c "
        python init_db.py &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Shell Application (Container)
  shell:
    build:
      context: .
      dockerfile: apps/shell/Dockerfile
    container_name: microshell-shell
    ports:
      - "4200:4200"
    volumes:
      - .:/workspace
      - /workspace/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - microshell-network
    command: npx nx serve shell --host 0.0.0.0 --port 4200

  # Dashboard Microfrontend
  dashboard:
    build:
      context: .
      dockerfile: apps/dashboard/Dockerfile
    container_name: microshell-dashboard
    ports:
      - "4201:4201"
    volumes:
      - .:/workspace
      - /workspace/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - microshell-network
    command: npx nx serve dashboard --host 0.0.0.0 --port 4201

  # Utenti Microfrontend
  utenti:
    build:
      context: .
      dockerfile: apps/utenti/Dockerfile
    container_name: microshell-utenti
    ports:
      - "4202:4202"
    volumes:
      - .:/workspace
      - /workspace/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - microshell-network
    command: npx nx serve utenti --host 0.0.0.0 --port 4202

  # Report Microfrontend
  report:
    build:
      context: .
      dockerfile: apps/report/Dockerfile
    container_name: microshell-report
    ports:
      - "4203:4203"
    volumes:
      - .:/workspace
      - /workspace/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - microshell-network
    command: npx nx serve report --host 0.0.0.0 --port 4203

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: microshell-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - shell
      - dashboard
      - utenti
      - report
    networks:
      - microshell-network

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: microshell-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microshell-network
    command: redis-server --appendonly yes

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: microshell-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microshell-network

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: microshell-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - microshell-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  microshell-network:
    driver: bridge 
# CI/CD workflow for MicroShell
# Node.js version set to 20.19.0 for Angular 20 compatibility
# SonarCloud and Snyk jobs are disabled by default (missing tokens)
# To re-enable, add SONAR_TOKEN and SNYK_TOKEN as GitHub secrets and decomment the jobs below

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20.19.0'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== DETECT CHANGES =====
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      shell: ${{ steps.changes.outputs.shell }}
      dashboard: ${{ steps.changes.outputs.dashboard }}
      utenti: ${{ steps.changes.outputs.utenti }}
      report: ${{ steps.changes.outputs.report }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/**'
              - 'libs/**'
              - 'package.json'
              - 'package-lock.json'
              - 'nx.json'
              - 'tsconfig*.json'
            backend:
              - 'backend/**'
            shell:
              - 'apps/shell/**'
              - 'libs/**'
            dashboard:
              - 'apps/dashboard/**'
              - 'libs/**'
            utenti:
              - 'apps/utenti/**'
              - 'libs/**'
            report:
              - 'apps/report/**'
              - 'libs/**'
            infrastructure:
              - 'docker-compose*.yml'
              - '**/Dockerfile'
              - 'nginx/**'
              - 'monitoring/**'

  # ===== FRONTEND PIPELINE =====
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    strategy:
      matrix:
        app: [shell, dashboard, utenti, report]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: npm

      - name: Install dependencies
        run: npm ci
      - name: Fix moderate vulnerabilities (optional)
        run: npm audit fix || true

      - name: Lint ${{ matrix.app }}
        run: npx nx lint ${{ matrix.app }}

      - name: Test ${{ matrix.app }}
        run: npx nx test ${{ matrix.app }} --watch=false --browsers=ChromeHeadless

      - name: Build ${{ matrix.app }}
        run: npx nx build ${{ matrix.app }} --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: dist/apps/${{ matrix.app }}
          retention-days: 7

  # ===== BACKEND PIPELINE =====
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Lint backend
        working-directory: ./backend
        run: |
          pip install flake8 black isort
          flake8 . --max-line-length=88 --extend-ignore=E203,W503 > ../backend-lint.log 2>&1
          black --check . >> ../backend-lint.log 2>&1
          isort --check-only . >> ../backend-lint.log 2>&1

      - name: Upload lint log
        uses: actions/upload-artifact@v4
        with:
          name: backend-lint-log
          path: backend-lint.log

      - name: Test backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
        run: |
          python -m pytest tests/ -v --tb=short > ../backend-test.log 2>&1

      - name: Upload test log
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-log
          path: backend-test.log

      - name: Build backend Docker image
        run: |
          docker build -t microshell-backend:latest ./backend > backend-docker-build.log 2>&1

      - name: Upload backend docker build log
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-build-log
          path: backend-docker-build.log

  # ===== SECURITY SCANS =====
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan log
        if: always()
        run: |
          cat trivy-results.sarif > trivy.log 2>&1 || true
        continue-on-error: true

      - name: Upload Trivy log
        uses: actions/upload-artifact@v4
        with:
          name: trivy-log
          path: trivy.log

  # ===== BUILD AND PUSH DOCKER IMAGES =====
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        component: [backend, shell, dashboard, utenti, report]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component == 'backend' && './backend' || '.' }}
          file: ${{ matrix.component == 'backend' && './backend/Dockerfile' || format('./apps/{0}/Dockerfile', matrix.component) }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== E2E TESTS =====
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Docker Compose plugin
        run: sudo apt-get update && sudo apt-get install -y docker-compose-plugin

      - name: Start services
        run: |
          docker compose up -d postgres redis
          sleep 10

      - name: Setup Python and start backend
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start backend for E2E
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          python init_db.py &
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5

      - name: Run E2E tests
        run: |
          npx nx e2e shell-e2e --headless
          npx nx e2e dashboard-e2e --headless

      - name: Stop services
        if: always()
        run: docker compose down

  # ===== DEPLOYMENT =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here

  # ===== CLEANUP =====
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "Cleaning up old artifacts and images..."
          # Add cleanup logic here

# Disabilito temporaneamente il job Code Quality Analysis (SonarCloud)
# Per riattivare, rimuovere 'if: false'
#  code-quality-analysis:
#    if: false  # <--- DISABILITATO TEMPORANEAMENTE, manca SONAR_TOKEN
#    # ... resto del job ...

# Disabilito temporaneamente il job Deep Security Scan (Snyk)
# Per riattivare, rimuovere 'if: false'
#  deep-security-scan:
#    if: false  # <--- DISABILITATO TEMPORANEAMENTE, manca SNYK_TOKEN
#    # ... resto del job ... 